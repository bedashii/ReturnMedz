/*
 * This file is part of IMDBDLL.
 *
 *  IMDBDLL is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  IMDBDLL is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with IMDBDLL.  If not, see <http://www.gnu.org/licenses/>.
 */

using System;
using System.Drawing;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Collections;
using IMDBDLL;
using System.Xml;
using IMDBDLL.MultiThreadEngine;

namespace Test
{
    /// <summary>
    /// Class that tests the API and shows how to use it.
    /// </summary>
    public partial class TestForm : Form
    {
        /// <summary>
        /// Delegate to call the processResults.
        /// </summary>
        /// <param name="xmlDoc">The XML document that holds the information obtained.</param>
        public delegate void functionCall(XmlDocument xmlDoc);

        /// <summary>
        /// Delegate to call the errorHandler.
        /// </summary>
        /// <param name="exc">The Exception.</param>
        public delegate void errorCall(Exception exc);

        /// <summary>
        /// Delegate to call the progressUpdater.
        /// </summary>
        /// <param name="value">Value to add to the progress bar.</param>
        public delegate void progressCall(int value);

        /// <summary>
        /// Delegate to call the progressConf.
        /// </summary>
        /// <param name="value">Value to set the progress bar maximum.</param>
        public delegate void progressConfCall(int value);

        /// <summary>
        /// Event of functionCall.
        /// </summary>
        private event functionCall formFunctionCaller;

        /// <summary>
        /// Event of errorCall.
        /// </summary>
        private event errorCall formErrorCaller;

        /// <summary>
        /// Event of progressCall.
        /// </summary>
        private event progressCall formProgressCaller;

        /// <summary>
        /// Event of progressConfCall.
        /// </summary>
        private event progressConfCall formProgressConfCaller;

        /// <summary>
        /// Execution Start Time.
        /// </summary>
        private DateTime ExecutionStartTime;

        /// <summary>
        /// Execution Stop Time.
        /// </summary>
        private DateTime ExecutionStopTime;

        /// <summary>
        /// Total Execution Time.
        /// </summary>
        private TimeSpan ExecutionTime;

        private bool error = false;



        /// <summary>
        /// Constructor
        /// </summary>
        public TestForm()
        {
            InitializeComponent();

            //Adds the events
            formFunctionCaller += new functionCall(processResult); 
            formErrorCaller += new errorCall(errorHandler);
            formProgressCaller += new progressCall(progressUpdater);
            formProgressConfCaller += new progressConfCall(progressConf);
        }

        /// <summary>
        /// Displays a message box with the error that occured.
        /// </summary>
        /// <param name="exc">Exception occured.</param>
        public void errorHandler(Exception exc)
        {
            error = true;
            button1.Enabled = true;
            Cursor = Cursors.Default;
            progressBar1.Value = 0;
            MessageBox.Show(exc.Message, "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        /// <summary>
        /// Change the progress bar value.
        /// </summary>
        /// <param name="value">Value to add to the current value.</param>
        public void progressUpdater(int value)
        {
            progressBar1.Value += value;
        }

        /// <summary>
        /// Sets the maximum value for the progress bar.
        /// </summary>
        /// <param name="value"></param>
        public void progressConf(int value)
        {
            progressBar1.Maximum = value;
        }

        /// <summary>
        /// Here we do whatever we want with the info.
        /// </summary>
        /// <param name="xmlDoc">The XML document that holds the information obtained.</param>
        public void processResult(XmlDocument xmlDoc)
        {
            if (xmlDoc.DocumentElement.HasChildNodes) // if there are results
            {
                if (!error) // and no errors occured
                {
                    XmlNodeList titles = xmlDoc.GetElementsByTagName("movie"); // gets the movies
                    if (titles.Count == 0)
                    {
                        titles = xmlDoc.GetElementsByTagName("serie"); // or the tv series
                    }
                    String link = "";
                    foreach (XmlNode title in titles)
                    {
                        XmlNodeList infos = title.ChildNodes;
                        for (int i = 0; i < infos.Count; i++)
                        {
                            if (infos[i].Name == "link") // if there is link info
                                link = infos[i].InnerText;
                            else if (infos[i].Name == "title") // if there is a title
                            {
                                String tit = infos[i].InnerText;
                                richTextBox1.SelectionFont = new Font("arial", 12, FontStyle.Bold);
                                richTextBox1.AppendText("Title: ");
                                richTextBox1.SelectionFont = new Font("arial", 12, FontStyle.Regular);
                                richTextBox1.AppendText(tit + Environment.NewLine);
                                if (link != "")
                                {
                                    richTextBox1.SelectionFont = new Font("arial", 9, FontStyle.Bold);
                                    richTextBox1.AppendText("  Link: ");
                                    richTextBox1.SelectionFont = new Font("arial", 8, FontStyle.Regular);
                                    richTextBox1.AppendText(link + Environment.NewLine);
                                }
                            }
                            else if (infos[i].Name == "year") // if there is a year
                            {
                                String year = infos[i].InnerText;
                                richTextBox1.SelectionFont = new Font("arial", 9, FontStyle.Bold);
                                richTextBox1.AppendText("  Year: ");
                                richTextBox1.SelectionFont = new Font("arial", 8, FontStyle.Regular);
                                richTextBox1.AppendText(year + Environment.NewLine);
                            }
                            else if (infos[i].Name == "cover")// if there is a cover link
                            {
                                String cov = infos[i].InnerText;
                                richTextBox1.SelectionFont = new Font("arial", 9, FontStyle.Bold);
                                richTextBox1.AppendText("  Cover URL: ");
                                richTextBox1.SelectionFont = new Font("arial", 8, FontStyle.Regular);
                                richTextBox1.AppendText(cov + Environment.NewLine);
                            }
                            else if (infos[i].Name == "user_rating")// if there is an user rating
                            {
                                String rate = infos[i].InnerText;
                                richTextBox1.SelectionFont = new Font("arial", 9, FontStyle.Bold);
                                richTextBox1.AppendText("  User Rating: ");
                                richTextBox1.SelectionFont = new Font("arial", 8, FontStyle.Regular);
                                richTextBox1.AppendText(rate + Environment.NewLine);
                            }
                            else if (infos[i].Name == "director")// if there is a director
                            {
                                String direct = infos[i].InnerText;
                                richTextBox1.SelectionFont = new Font("arial", 9, FontStyle.Bold);
                                richTextBox1.AppendText("  Director: ");
                                richTextBox1.SelectionFont = new Font("arial", 8, FontStyle.Regular);
                                richTextBox1.AppendText(direct + Environment.NewLine);
                            }
                            else if (infos[i].Name == "creator")// if there is a creator
                            {
                                String creat = infos[i].InnerText;
                                richTextBox1.SelectionFont = new Font("arial", 9, FontStyle.Bold);
                                richTextBox1.AppendText("  Creator: ");
                                richTextBox1.SelectionFont = new Font("arial", 8, FontStyle.Regular);
                                richTextBox1.AppendText(creat + Environment.NewLine);
                            }
                            else if (infos[i].Name == "seasons")// if there is episodes information
                            {
                                richTextBox1.SelectionFont = new Font("arial", 9, FontStyle.Bold);
                                richTextBox1.AppendText("  Episodes:" + Environment.NewLine);
                                
                                XmlNodeList seasons = infos[i].ChildNodes;
                                foreach (XmlNode s in seasons)
                                {
                                    richTextBox1.SelectionFont = new Font("arial", 9, FontStyle.Bold);
                                    richTextBox1.AppendText("   Season " + s.Name.Substring(s.Name.IndexOf("season") + 6) + Environment.NewLine);
                                    
                                    XmlNodeList episodes = s.ChildNodes;
                                    foreach (XmlNode ep in episodes)
                                    {
                                        XmlNodeList details = ep.ChildNodes;
                                        foreach (XmlNode d in details)
                                        {
                                            if (d.Name == "number")//if there is a number
                                            {
                                                String numb = d.InnerText;
                                                richTextBox1.SelectionFont = new Font("arial", 8, FontStyle.Bold);
                                                richTextBox1.AppendText("     " + numb + ": ");
                                            }
                                            else if (d.Name == "title") //if there is a title
                                                richTextBox1.AppendText(d.InnerText + Environment.NewLine);
                                            else if (d.Name == "airDate")// if there is an air date
                                            {
                                                richTextBox1.SelectionFont = new Font("arial", 8, FontStyle.Regular);
                                                richTextBox1.AppendText("      Aired on: " + d.InnerText + Environment.NewLine);
                                            }
                                            else if (d.Name == "plot") //if there is a plot
                                                richTextBox1.AppendText("      " + d.InnerText + Environment.NewLine);
                                        }
                                    }
                                }
                            }
                            else if (infos[i].Name == "genres")// if there is genres information
                            {
                                richTextBox1.SelectionFont = new Font("arial", 9, FontStyle.Bold);
                                richTextBox1.AppendText("  Genres: " + Environment.NewLine);
                                richTextBox1.SelectionFont = new Font("arial", 8, FontStyle.Regular);
                                XmlNodeList genres = infos[i].ChildNodes;
                                foreach (XmlNode g in genres)
                                {
                                    richTextBox1.AppendText("    " + g.InnerText + Environment.NewLine);
                                }
                            }
                            else if (infos[i].Name == "tagline")// if there is a tagline
                            {
                                richTextBox1.SelectionFont = new Font("arial", 9, FontStyle.Bold);
                                richTextBox1.AppendText("  Tagline: ");
                                richTextBox1.SelectionFont = new Font("arial", 8, FontStyle.Regular);
                                richTextBox1.AppendText(infos[i].InnerText + Environment.NewLine);
                            }
                            else if (infos[i].Name == "plot")// if there is a plot
                            {
                                richTextBox1.SelectionFont = new Font("arial", 9, FontStyle.Bold);
                                richTextBox1.AppendText("  Plot: ");
                                richTextBox1.SelectionFont = new Font("arial", 8, FontStyle.Regular);
                                richTextBox1.AppendText(infos[i].InnerText + Environment.NewLine);
                            }
                            else if (infos[i].Name == "cast")// if there is a cast
                            {
                                richTextBox1.SelectionFont = new Font("arial", 9, FontStyle.Bold);
                                richTextBox1.AppendText("  Cast: " + Environment.NewLine);
                                XmlNodeList actors = infos[i].ChildNodes;
                                foreach (XmlNode a in actors)
                                {
                                    String photo = "", page = "";
                                    XmlNodeList details = a.ChildNodes;
                                    foreach (XmlNode d in details)
                                    {
                                        if (d.Name == "photo") //if there is a photo url
                                            photo = d.InnerText;
                                        else if (d.Name == "page") //if there is a page link
                                            page = d.InnerText;
                                        else if (d.Name == "name") //if there is a name
                                        {
                                            richTextBox1.SelectionFont = new Font("arial", 9, FontStyle.Bold);
                                            richTextBox1.AppendText("    " + d.InnerText + Environment.NewLine);
                                            richTextBox1.SelectionFont = new Font("arial", 8, FontStyle.Regular);
                                            if (photo != "")
                                                richTextBox1.AppendText("     Photo URL: " + photo + Environment.NewLine);
                                            if (page != "")
                                                richTextBox1.AppendText("     Page URL: " + page + Environment.NewLine);
                                        }
                                    }
                                }
                            }
                            else if (infos[i].Name == "runtime")// if there is a runtime
                            {
                                richTextBox1.SelectionFont = new Font("arial", 9, FontStyle.Bold);
                                richTextBox1.AppendText("Runtime: ");
                                richTextBox1.SelectionFont = new Font("arial", 8, FontStyle.Regular);
                                richTextBox1.AppendText("  " + infos[i].InnerText + " min" +Environment.NewLine + Environment.NewLine);
                            }
                        }
                        
                    }
                }
            }
            else
            {
                errorHandler(new Exception("No results found!"));
            }

            ExecutionStopTime = DateTime.Now;
            ExecutionTime = ExecutionStopTime - ExecutionStartTime;
            richTextBox1.SelectionFont = new Font("arial", 12, FontStyle.Bold);
            richTextBox1.AppendText(ExecutionTime.TotalSeconds.ToString());
        }

        /// <summary>
        /// Function that handles the search button click. It is here that the API is called.
        /// </summary>
        /// <param name="sender">default argument.</param>
        /// <param name="e">default argument.</param>
        private void button1_Click(object sender, EventArgs e)
        {
            String text = textBox1.Text;
            if (text != "") // if there is text in the textBox.
            {
                ExecutionStartTime = DateTime.Now; //Starts the clock.
                richTextBox1.Clear(); // Clear the text field.
                error = false; //Reset the error.
                progressBar1.Value = 0; //Reset the progressbar.
                

                //Starts the manager of the api.
                IMDbManager manag = new IMDbManager();
                manag.parentErrorCaller = formErrorCaller;
                manag.parentFunctionCaller = formFunctionCaller;
                manag.parentProgressUpdaterCaller = formProgressCaller;
                manag.parentProgressConfCaller = formProgressConfCaller;

                //Read the options of the user.
                bool[] fields = { true, true, true, true, true, true, true, true, true, true, true }; //Parses all the fields.
                bool titleR = radioButton1.Checked, serieR = radioButton4.Checked;
                int media = 0, sSeas = 0, eSeas = 0, searchMode = 0, nActors = 5;
                if (serieR) // If it's a TV serie we are looking for
                { 
                    media = 1;
                    if (checkBox1.Checked) // Set how much seasons is to parse.
                    {
                        sSeas = -1;
                        eSeas = -1;
                    }
                    else
                    {
                        sSeas = Int32.Parse(textBox3.Text);
                        eSeas = Int32.Parse(textBox4.Text);
                    }
                }

                if (!titleR) // If it's to search by ID
                    searchMode = 1;

                if (checkBox2.Checked)
                {
                    nActors = -1;
                }
                else nActors = Int32.Parse(textBox5.Text);

                //Call the api.
                manag.IMDbSearch(searchMode, text, media, nActors, sSeas, eSeas, fields);
            }
        }

        /// <summary>
        /// Detect if the enter key was pressed in the textbox.
        /// </summary>
        /// <param name="sender">default argument.</param>
        /// <param name="e">default argument.</param>
        private void textBox1_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                button1_Click(sender, null);
        }

        /// <summary>
        /// If series radio button checked state changed
        /// </summary>
        /// <param name="sender">default argument.</param>
        /// <param name="e">default argument.</param>
        private void radioButton4_CheckedChanged(object sender, EventArgs e)
        {
            checkBox1.Enabled = !checkBox1.Enabled;
        }

        /// <summary>
        /// If all seasons radio button checked state changed.
        /// </summary>
        /// <param name="sender">default argument.</param>
        /// <param name="e">default argument.</param>
        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            textBox3.Enabled = !textBox3.Enabled;
            textBox4.Enabled = !textBox4.Enabled;
        }

        /// <summary>
        /// If all actors radio button checked state changed.
        /// </summary>
        /// <param name="sender">default argument.</param>
        /// <param name="e">default argument.</param>
        private void checkBox2_CheckedChanged(object sender, EventArgs e)
        {
            textBox5.Enabled = !textBox5.Enabled;
        }
    }
}
